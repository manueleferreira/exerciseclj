cmdhistory=["(add-new-invite 2 3)" "(println customers)" "customers" "(add-new-invite 2 3)" "customers" "(add-new-invite 2 3)" "customers" "(add-new-invite 2 3)" "customers" "(add-new-invite 8 9)" "customers" "(def node (Node. \\"foo\\" nill))" "(def node (Node. \\"foo\\" nil))" "(.car node)" "(.cdr node)" "(def list (Node. 2 (Node. 3 nill)))" "(def lit (Node. 2 (Node. 3 nill)))" "(def lit (Node. 2 (Node. 3 nil)))" "(.cdr lit)" "(.car (.cdr lit))" "(add-new-invite 2 3)" "customers" "(first customers)" "(.getCar (first customers))" "(.getCar (def node (first customers)))" "(def node (Node. \\"foo\\" nil))" "(.getCar node)" "(.getCar (first customers))" "(add-new-invite 2 3)" "customers" "(loop [x 10])" "(loop [x 10] (when (> x 1) (println x)))" "\\n(loop [x 2] (when (> x 1) (println x)))" "(loop [x 10] (when (> x 1) (println x) (recur (- x 1))))" "(loop [x 10] (when (> x 1) (print x) (recur (- x 1))))" "(loop [x (.length customers)] (print x))" "customers" "(loop [x (.length customers)] (when (\= (.getCar (nth customers x)) 2) (recur (- x 1))))" "(loop [x (- (.length customers) 1)] (when (\= (.getCar (nth customers x)) 2) (recur (- x 1))))" "(loop [x (- (.length customers) 1)] (when (\= (let var (.getCar (nth customers x)) 2)) (println var) (recur (- x 1))))" "(loop [x (- (.length customers) 1)] (when (\= (def var (.getCar (nth customers x)) 2)) (println var) (recur (- x 1))))" "(loop [x (- (.length customers) 1)] (println x) (recur (- x 1)) )" "(loop [x (- (.length customers) 1)] (when (< x 1)(println x) (recur (- x 1))) )" "(loop [i 0]  \\r\\n  (when (< i 5)    \\r\\n    (println i)    \\r\\n    (recur (inc i)); loop i will take this value\\r\\n))" "(loop [i 0] \\n  (when (< i (.length customers))\\n    (println i) \\n    (recur (inc i))\\n))" "customers" "(add-new-invite 2 3)" "customers" "(loop [i 0] \\r\\n  (when (< i (.length customers))\\r\\n    (println i) \\r\\n    (recur (inc i))\\r\\n))" "(loop [i 0] \\r\\n  (when (< i (.length customers))\\r\\n    (println (.indexOf customers i)) \\r\\n    (recur (inc i))\\r\\n))" "(loop [i 0] \\r\\n  (when (< i (.length customers))\\r\\n    (println (nth customers i)) \\r\\n    (recur (inc i))\\r\\n))" "(loop [i 0] \\r\\n  (when (< i (.length customers))\\r\\n    (println (.getCar (nth customers i))) \\r\\n    (recur (inc i))\\r\\n))" "(loop [i 0] \\r\\n  (when (< i (.length customers))\\r\\n    (if (\= (.getCar (nth customers i)) 2)\\n      (println \\"Hello\\" i))\\r\\n    (recur (inc i))\\r\\n))" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\r\\n\\t    (if (\= (.getCar (def node (nth customers i))) 2)\\r\\n\\t      node)\\r\\n\\t    (recur (inc i))\\r\\n))" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\r\\n\\t    (if (\= (.getCar (nth customers i)) 2)\\r\\n\\t      node)\\r\\n\\t    (recur (inc i))\\r\\n))" "(add-new-invite 2 3)" "customers" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\r\\n\\t    (if (\= (.getCar (def node (nth customers i))) 3)\\r\\n\\t      node)\\r\\n\\t    (recur (inc i))\\r\\n))" "(nth customers i)" "(nth customers 1)" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\r\\n\\t    (if (\= (.getCar (nth customers i)) 3)\\r\\n\\t      node)\\r\\n\\t    (recur (inc i))\\r\\n))" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\r\\n\\t    (if (\= (.getCar (nth customers i)) 3)\\r\\n\\t      (nth customers i))\\r\\n\\t    (recur (inc i))\\r\\n))" "(if-let [a \\"w\\"] a \\"c\\")" "(if-let [b \\"w\\"] a \\"c\\")" "(if-let [a \\"w\\"] true \\"c\\")" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\r\\n\\t    (if (\= (.getCar (nth customers i)) 3)\\r\\n\\t      (nth customers i))\\r\\n\\t    (recur (inc i))\\r\\n))" "customers" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\r\\n\\t    (if (\= (.getCar let[node (nth customers i)]) 3)\\r\\n\\t      node)\\r\\n\\t    (recur (inc i))\\r\\n))" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\r\\n\\t    (if (\= (.getCar (let[node (nth customers i)])) 3)\\r\\n\\t      node)\\r\\n\\t    (recur (inc i))\\r\\n))" "(.getCar (let[node (nth customers 1)]))" "(let[node (nth customers 1)])" "node" "(.getCar (let[node (nth customers 1)]))" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\n     (let[node (nth customers i)])\\n     (if (\= (.getCar node) 3)\\n       node)\\r\\n\\t    (recur (inc i))\\r\\n))" "node" "customers" "(add-new-invite 3 4)" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\r\\n     (let[node (nth customers i)])\\r\\n     (if (\= (.getCar node) 3)\\r\\n       node)\\r\\n\\t    (recur (inc i))\\r\\n))" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\r\\n     (def[node (nth customers i)])\\r\\n     (if (\= (.getCar node) 3)\\r\\n       node)\\r\\n\\t    (recur (inc i))\\r\\n))" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\r\\n     (def(node (nth customers i)))\\r\\n     (if (\= (.getCar node) 3)\\r\\n       node)\\r\\n\\t    (recur (inc i))\\r\\n))" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\r\\n     (if (\= (.getCar (nth customers i)) 3)\\r\\n       i)\\r\\n\\t    (recur (inc i))\\r\\n))" "(add-new-invite 2 3)" "customers" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\r\\n\\t    (if (\= (.getCar (def node (nth customers i))) 2)\\r\\n\\t      node)\\r\\n\\t    (recur (inc i))\\r\\n))" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\r\\n\\t    (if (\= (.getCar (nth customers i)) 2)\\r\\n\\t      (nth customers i))\\r\\n\\t    (recur (inc i))\\r\\n))" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\r\\n\\t    (if (\= (.getCar (let [node (nth customers i)])) 2)\\r\\n\\t      node)\\r\\n\\t    (recur (inc i))\\r\\n))" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\n      (let [node (nth customers i)]\\r\\n\\t    (if (\= (.getCar node ) 2)\\r\\n\\t      node))\\r\\n\\t    (recur (inc i))\\r\\n))" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\r\\n      (let [node (nth customers i)]\\r\\n\\t    (if (\= (.getCar node ) 2)\\r\\n\\t      (println node)))\\r\\n\\t    (recur (inc i))\\r\\n))" "(add-new-invite 2 3)" "customers" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\r\\n\\t    (let [node (nth customers i)](if (\= (.getCar node) param)\\r\\n\\t      node))\\r\\n\\t    (recur (inc i))\\r\\n))" "(loop [i 0] \\r\\n\\t  (when (< i (.length customers))\\r\\n\\t    (let [node (nth customers i)](if (\= (.getCar node) 2)\\r\\n\\t      node))\\r\\n\\t    (recur (inc i))\\r\\n))" "(loop [i 0]\\n  (let [node (nth customers i)]\\n    (when (and (< i (.length customers)) (<> node nil))\\r\\n\\t    (if (\= (.getCar node) 2)\\r\\n\\t      node))\\r\\n\\t    (recur (inc i))\\r\\n))" "(loop [i 0]\\r\\n  (let [node (nth customers i)]\\r\\n    (when (and (< i (.length customers)) (?nil node))\\r\\n\\t    (if (\= (.getCar node) 2)\\r\\n\\t      node))\\r\\n\\t    (recur (inc i))\\r\\n))" "(loop [i 0]\\r\\n  (let [node (nth customers i)]\\r\\n    (when (and (< i (.length customers)) (nil? node))\\r\\n\\t    (if (\= (.getCar node) 2)\\r\\n\\t      node))\\r\\n\\t    (recur (inc i))\\r\\n))" "customers" "(loop [i 0]\\r\\n  (let [node (nth customers i)]\\r\\n    (cond\\r\\n\\t    (\= (.getCar node) 2) node\\n      (and (nil? node) (< (inc i) (.length customers))) (recur i)\\n      )\\r\\n))" "(loop [i 0]\\r\\n  (println i)\\r\\n  (let [node (nth customers i)]\\r\\n    (cond\\r\\n\\t    (\= (.getCar node) 2) (println node)\\r\\n      (and (nil? node) (< (inc i) (.length customers))) (recur i))\\r\\n))" "(loop [i 0]\\r\\n  (println i)\\r\\n  (let [node (nth customers i)]\\r\\n    (cond\\r\\n\\t    (\= (.getCar node) 2) (println node)\\r\\n      (and (nil? node) (< i (.length customers))) (recur i))\\r\\n))" "(loop [i 0]\\r\\n  (println i)\\r\\n  (let [node (nth customers i)]\\r\\n    (cond\\r\\n\\t    (\= (.getCar node) 2) (println node)\\r\\n      (and (nil? node) (< i (.length customers))) (recur (inc i)))\\r\\n))" "(add-new-invite 3 4)" "(add-new-invite 2 3)" "customers" "(loop [i 0]\\r\\n  (cond\\r\\n    (let [node (nth customers i)] (\= (.getCar node) 2) node)\\r\\n    (< i (.length customers))(recur (inc i))\\r\\n))" "(loop [i 0]\\r\\n  (cond\\r\\n    (let [node (nth customers i)] (\= (.getCar node) 2)) node\\r\\n    (< i (.length customers))(recur (inc i))\\r\\n))" "(loop [i 0]\\r\\n  (cond\\r\\n    (\= (.getCar (nth customers i)) 2) (nth customers i)\\r\\n    (< i (.length customers))(recur (inc i))\\r\\n))" "(loop [i 0]\\r\\n  (cond\\r\\n    (\= (.getCar (nth customers i)) 2) (.getCar(nth customers i))\\r\\n    (< i (.length customers))(recur (inc i))\\r\\n))" "(loop [i 0]\\r\\n  (let [node (nth customers i)](cond\\r\\n    (\= (.getCar node) 2) node\\r\\n    (< i (.length customers))(recur (inc i))\\r\\n)))" "(loop [i 0]\\r\\n  (let [node (nth customers i)](cond\\r\\n    (\= (.getCar node) 3) node\\r\\n    (< i (.length customers))(recur (inc i))\\r\\n)))" "(loop [i 0]\\r\\n  (let [node (nth customers i)](cond\\r\\n    (\= (.getCar node) 4) node\\r\\n    (< i (.length customers))(recur (inc i))\\r\\n)))" "(loop [i 0]\\r\\n  (let [node (nth customers i)](cond\\r\\n    (\= (.getCar node) 4) node\\r\\n    (< (inc i) (.length customers))(recur i)\\r\\n)))" "(loop [i 0]\\r\\n  (let [node (nth customers i)]\\n    (cond\\r\\n      (\= (.getCar node) 4) node\\r\\n      (< (inc i) (.length customers))(recur i)\\r\\n)))" "(loop [i 0]\\r\\n  (let [node (nth customers i)]\\r\\n    (cond\\r\\n      (\= (.getCar node) 2) node\\r\\n      (< (inc i) (.length customers))(recur i)\\r\\n)))" "(loop [i 0]\\r\\n  (let [node (nth customers i)]\\r\\n    (cond\\r\\n      (\= (.getCar node) 4) node\\r\\n      (< (i (.length customers))(recur (inc i))\\r\\n))))" "(loop [i 0]\\r\\n  (let [node (nth customers i)]\\r\\n    (cond\\r\\n      (\= (.getCar node) 4) node\\r\\n      (< i (.length customers))(recur (inc i))\\n)))" "(loop [i 0]\\r\\n     (let [node (nth customers i)](cond\\r\\n       (\= (.getCar node) 3) node\\r\\n       (< i (.length customers))(recur (inc i))\\r\\n   )))" "customers" "(add-new-invite 2 3)" "customers" "(loop [i 0]\\r\\n     (let [node (nth customers i)](cond\\r\\n       (\= (.getCar node) 3) node\\r\\n       (< i (.length customers))(recur (inc i))\\r\\n   )))" "(loop [i 0]\\r\\n     (let [node (nth customers i)](cond\\r\\n       (\= (.getCar node) 3) node\\r\\n       (< (inc i) (.length customers))(recur i)\\r\\n   )))" "(loop [i 0]\\r\\n     (let [node (nth customers i)](cond\\r\\n       (\= (.getCar node) 4) node\\r\\n       (< (inc i) (.length customers))(recur i)\\r\\n   )))" "(loop [i 0]\\r\\n     (let [node (nth customers i)](cond\\r\\n       (\= (.getCar node) 2) node\\r\\n       (< (inc i) (.length customers))(recur i)\\r\\n   )))" "(loop [i 0]\\r\\n     (let [node (nth customers i)](cond\\r\\n       (\= (.getCar node) 3) node\\r\\n       (< (inc i) (.length customers))(recur i)\\r\\n   )))" "(loop [i 0]\\r\\n     (let [node (nth customers i)]\\n       (cond\\r\\n         (\= (.getCar node) 4) node\\r\\n         (< (inc i) (.length customers))(recur i)\\r\\n   )))" "(loop [i 0]\\r\\n     (let [node (nth customers i)]\\r\\n       (cond\\r\\n         (\= (.getCar node) 4) node\\r\\n         (< i (.length customers))(recur (inc i))\\r\\n   )))" "(loop [i 0]\\r\\n        (let [node (nth customers i)](cond\\r\\n          (\= (.getCar node) 3) node\\r\\n          (< (inc i) (.length customers))(recur i)\\r\\n      )))" "(add-new-invite 2 3)" "customers" "(find-customer 2)" "(loop [i 0]\\r\\n    (let [node (nth customers i)]\\r\\n      (cond\\r\\n          (\= (.getCar node) 2) node\\r\\n          (< (inc i) (.length customers))(recur i))))" "customers" "(add-new-invite 2 3)" "(find-customer 2)" "(find-customer 4)" "(.getCar (find-customer 4))" "(find-customer 4)" "(find-customer 2)" "customers" "(add-new-invite 2 3)" "(find-customer 2)" "(loop [i 0]\\r\\n    (when (< i (.length customers))\\r\\n      (let [node (nth customers i)]\\r\\n        (cond\\r\\n          (\= (.getCar node) i) node\\r\\n          \:else (recur (inc i))))))" "(loop [i 0]\\r\\n    (when (< i (.length customers))\\r\\n      (let [node (nth customers i)]\\r\\n        (cond\\r\\n          (\= (.getCar node) 4) node\\r\\n          \:else (recur (inc i))))))" "(loop [i 0]\\r\\n    (when (< i (.length customers))\\r\\n      (let [node (nth customers i)]\\r\\n        (cond\\r\\n          (\= (.getCar node) 2) node\\r\\n          \:else (recur (inc i))))))" "customers" "(add-new-invite 2 3)" "(find-customer 2)" "(find-customer 4)" "customers" "(2 6)" "(add-new-invite 2 6)" "customers" "(add-new-invite 2 3)" "(find-customer 3)" "(find-customer 2)" "(nil? d)" "(nil? nil)" "customers" "(if (nil? (find-customer 2))\\r\\n  (println 2))" "(def customers \\r\\n                        (conj list \\r\\n                            (Node. 2 '((Node. 3 nil)))))" "(list (Node. 3 nil))" "(def customers \\n  (conj list \\n        (Node. 2 (list (Node. 3 nil)))))" "(conj list \\r\\n        (Node. 2 (list (Node. 3 nil))))" "customers" "(add-new-invite 2 3)" "customers" "(add-new-invite 2 3)" "customers" "(add-new-invite 2 3)" "customers" "(add-new-invite 2 3)" "(find-customer 2)" "(find-customer 3)" "(.getCar (find-customer 2))" "(.getCdr (find-customer 2))" "(.getCar (.getCdr (find-customer 2)))" "(.getCar (nth (.getCdr (find-customer 2)) 0) )" "(nth (.getCdr (find-customer 2)) 0)" "(.getCar (nth (.getCdr (find-customer 2)) 0))" "customers" "(add-new-invite 2 3)" "(.getCar (nth (.getCdr (find-customer 2)) 0))" "customers" "(add-new-invite 2 3)" "(.getCar (nth (.getCdr (find-customer 2)) 0))" "(read-invite-file \\"C\:\\\\Users\\\\manue\\\\Source\\\\Repos\\\\fnexercise\\\\doc\\\\input.txt\\")" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input.txt\\")" "(read-invite-file \\"C\:\\\\Users\\\\manue\\\\Source\\\\Repos\\\\fnexercise\\\\doc\\\\input.txt\\")" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc?input.txt\\")" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input.txt\\")" "customers" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "customers" "(.getCar (nth customers 0))" "(.getCar (nth customers 1))" "(.getCar (nth customers 2))" "(.getCar (nth customers 3))" "(.getCar (nth customers 4))" "(.getCar (nth customers 5))" "(.getCar (nth customers 6))" "(.getCdr (nth customers 0))" "(.getCdr (nth customers 1))" "(.getCdr (nth customers 2))" "(.getCdr (nth customers 3))" "(.getCdr (nth customers 4))" "(.getCdr (nth customers 5))" "(a-test)" "(run-tests)" "(run-all-tests)" "lein test" "(list-ranking)" "(\\"bob\\")" "(println \\"B\\")" "(count-points-ranking)" "(ns com.fnexercise.fnexercise)" "(count-points-ranking)" "(list-ranking)" "(customers)" "customers" "(count-points-ranking)" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "customers" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "customers" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "customers" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(println 0.5)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(dotrace list-ranking)" "(use 'clojure.contrib.trace)" "(dotrace list-ranking)" "(use 'clojure.tools.trace)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(trace list-ranking)" "(trace (list-ranking))" "(dotrace (list-ranking))" "(dotrace [list-ranking] (list-ranking))" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input.txt\\")" "(dotrace [list-ranking] (list-ranking))" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(dotrace [list-ranking] (list-ranking))" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(dotrace [list-ranking] (list-ranking))" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(pst)" "(doc list)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "customers" "(dbg (->> list-ranking))" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)" "(read-invite-file \\"C\:/Users/manue/Source/Repos/fnexercise/doc/input_test.txt\\")" "(list-ranking)"]
eclipse.preferences.version=1
